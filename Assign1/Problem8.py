# python 2
# reference: https://github.com/kur0mi/CTF-RSA/blob/master/加密指数/低指数加密广播攻击/crack.py
from struct import pack, unpack
import zlib
import gmpy
def my_parse_number(number):
	string = "%x" % number
	erg = []
	while string != '':
		erg = erg + [chr(int(string[:2], 16))]
		string = string[2:]
	return ''.join(erg)

def extended_gcd(a, b):
	x, y = 0, 1
	lastx, lasty = 1, 0
	while b:
		a, (q, b) = b, divmod(a,b)
		x, lastx = lastx - q * x, x
		y, lasty = lasty - q * y, y
	return (lastx, lasty, a)

def chinese_remainder_theorem(items):
	N = 1
	for a, n in items:
		N *= n
	result = 0
	for a, n in items:
		m = N / n
		r, s, d = extended_gcd(n, m)
		if d != 1:
			N = N / n
			continue
		result += a * s * m
	return result % N, N

sessions=[{"c": 106020196404228995516590540212435851638773473743677608961695610507734940562131176543618820830657327199271604646528181103597845817005762472640590295350983419095292501232423326692010287728861191901318250405785849303085016466986094251386742076372533712716317307837540220601126802587071521809044872479157668942864, "e": 3, "n": 128192387537879068990089867915447081702601626020790664322244711564641759777736533450117725770767912654205091810481591002386508715628875319468200902670660266336730773830476852729295487162795189023992322548554057792335831994939303211098020205095138049921504916772590149464238076409544660412926909798241972589013},
{"c": 76480033860494096083869954520551691437935637592868020847918400222637830703992630905056555018646643585387356114782840670946111210130077381425442860353664440200533974849174240317882367152597737454922227439513372779669922201800643264562217405430041963680008586176237886994472333575472737719404771823307307823157, "e": 3, "n": 132890264630233302891493509822270411766561990140662407274757712824792306164531188638049047351890386201640774927727319263960958841316821883893153601721821432594666122272976336012729683178093416223977485977894991426583613152488884750097130707428683503629330703356664387045005931534725464958473358695936184496463},
{"c": 20102456080829082501810286334312183665336034913585019338839142526385701098584619031913891045175662795741707642050243931355451476580566909085796238550550425063633047179182683789615516828313201536905967857569081718698682441529643692599364356686719117762122671901561076938797983384081886780530302663341670721844, "e": 3, "n": 102822972098342469858427813786103099349007916904724397041265919104503067169247280380965425703991381713405847752898847523441655009845097619496427607998587987857911006218743704763813319840463596181851040993427129756336458813513010639973029046910859668581066316344612940716532325332300300469635911830481446858341}]

data = []
for session in sessions:
	e = session['e']
	n = session['n']
	msg = session['c']
	data += [(msg, n)]
print "Please wait, performing CRT"
x, n = chinese_remainder_theorem(data)
e = session['e']
realnum = gmpy.mpz(x).root(e)[0].digits()
print my_parse_number(int(realnum))

# flag: BALSN{Therefore_We_5hould_Not_Choose_4_5mall_Public_Key...}